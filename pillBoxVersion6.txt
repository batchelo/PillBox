#include <Time.h>
#include <TimeLib.h>
#include <LiquidCrystal.h>
#include <Wire.h>  
#include <DS1307RTC.h>

const int IN1 = 8;
const int IN2 = 9;
const int IN3 = 10;
const int IN4 = 11;

LiquidCrystal lcd(2, 3, 4, 5, 6, 7); //this sets the arduino pins that will be used by the LCD display.
  
const int latchPin = A2;     //define the arduino pins that the shift register is using.
const int dataPin = A1;     //define the arduino pins that the shift register is using.
const int clockPin = A3;    //define the arduino pins that the shift register is using.
const int drawerPin = A6;   //assigns a variable name to the A6 pin so that it can be designated as a digital input that the drawer switch can use.

byte switchVar1 = 72;  //01001000  Define a variable to hold the data for the shift register.

int Steps = 0;
boolean Direction = true;
unsigned long last_time;
unsigned long currentMillis;
int steps_left=4095;
long time;

void setup()  
{                   
  lcd.begin(16, 2);               //initializes the LCD screen as a 2 row by 16 character display.
  Serial.begin(9600);             //opens the serial communications so that I can monitor what is happening with the code.
   while (!Serial) ;              //wait for serial
  delay(200);

  pinMode(latchPin, OUTPUT);      //define pinmodes for Shift Register
  pinMode(clockPin, OUTPUT);      //define pinmodes for Shift Register
  pinMode(dataPin, INPUT);        //define pinmodes for Shift Register
  pinMode(drawerPin, INPUT);      //define pinmode for Drawer state switch
  pinMode(12, OUTPUT);            //set pin 12 to output for use in green LED [pin 13 is for the red LED and is output by default]
 
}

void loop() {
      //----------------------------------------------------------------Start main loop Interaction with the Shift Register

  digitalWrite(latchPin,1);     //Pulse the latch pin to 1 to collect parallel data
  delayMicroseconds(20);        //wait
  digitalWrite(latchPin,0);     //set it to 0 to transmit data serially    

  switchVar1 = shiftIn(dataPin, clockPin);   //while the shift register is in serial mode, collect each shift register into a byte
  
if ((switchVar1)== 0)            //goes to main function unless button pushed to open menus
{
  
   Serial.println("I am at the top of the main loop function, prior to the time display");     //-------diagnostic line
   //-----------------central functions of the pillbox
   //-----------------display date and time when not in menus
tmElements_t tm;

  if (RTC.read(tm)) 
     {
  lcd.setCursor(0,0);   //puts cursor at the first spot/first row.  
  lcd.print(tm.Month);
  lcd.print('/');
  lcd.print(tm.Day);      
  lcd.print('/');
  lcd.print(tmYearToCalendar(tm.Year));
  
  lcd.setCursor(0,1);          //puts cursor at the first spot on the second row.  
  lcd.print(tm.Hour);
  lcd.print(':');
  lcd.print(tm.Minute);
  lcd.print(':');
  lcd.print(tm.Second);
    } 
    else 
    {
    if (RTC.chipPresent()) 
    {
      Serial.println("The DS1307 is stopped.  Please run the SetTime");
      Serial.println("example to initialize the time and begin running.");
      Serial.println();
    } 
    else 
    {
      Serial.println("DS1307 read error!  Please check the circuitry.");
      Serial.println();
    }
    delay(9000);
  }
  delay(1000);
//-----------------------------end display of date and time

//-----------------------------read time and alarms to see if it is time to distribute pills


//-----------------------------if time to distribute pills, rotate caroselle x degrees


//-------------------------turn light to green either for 30 min or until drawer switch activated


//-----------turn light to red and deactivate caroselle rotation until drawer switch activated 
  
}
else
{
//-----------------main input menu 
String mainMenuOptions[] = {"+ or -", "Set Date/Time", "deposits per day", "times of deposits", "rotate wheel", "exit menus"};
String months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
String dates[] = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17",
"18","19","20","21","22","23","24","25","26","27","28","29","30","31"};
String days[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
String hours[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"};
String minutes[] = {"00","01","02","03","04","05","06","07","08","09","10","11","12",
"13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28",
"29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44",
"45","46","47","48","49","50","51","52","53","54","55","56","57","58","59"};
String ampm[] = {"AM", "PM"}; 

int menuCounter = 0;  //creates a local variable and gives it a starting value 
boolean i=true;       //creates a local boolean variable to serve as a condition for my "while" statement 
int caseNumber = 0;   //creates a local variable and gives it a starting value

  digitalWrite(latchPin,1);     //Pulse the latch pin to 1 to collect parallel data
  delayMicroseconds(20);        //wait
  digitalWrite(latchPin,0);     //set it to 0 to transmit data serially    
  delay (2000);
  switchVar1 = shiftIn(dataPin, clockPin);   //while the shift register is in serial mode, collect each shift register into a byte

  lcd.setCursor(0,0);   //puts cursor at the first spot/first row.  
  lcd.print("Main Menu");
  lcd.setCursor(0,1);
  lcd.print(mainMenuOptions[menuCounter]);


while (i=true)        //this "while loop forces the selection of a submenu
{
if (bitRead(switchVar1,3)==1)
  {
    menuCounter = (menuCounter+1)%6;
    Serial.println("incrimented menucounter by +1");
    Serial.println(menuCounter);
  }
if (bitRead(switchVar1,1)==1)
  {
    menuCounter = (menuCounter-1)%6;
    Serial.println("decreased menucounter by +1");
    Serial.println(menuCounter);
  }
if  (bitRead(switchVar1,0)==1)
  {
  caseNumber = menuCounter;
  Serial.println(caseNumber);
  i=false;  //terminates while loop
  }

}
switch (caseNumber)
   {
      case 0:       //Set Date and Time on RTC
        lcd.setCursor(0,0);
        lcd.print("in set date");
        Serial.println("I am in Switch Case 0");
        break;
      case 1:       //designate the number of pill deposits in a day
        lcd.setCursor(0,0);       
        lcd.print("in # of dep");
        Serial.println("I am in Switch Case 1");
        break;
      case 2:       //set the time of day for each of the pill deposits
        lcd.setCursor(0,0);
        lcd.print("in set dep time");
        Serial.println("I am in Switch Case 2");
        break;
      case 3:       //rotate the carroselle to its initial starting spot
        lcd.setCursor(0,0);        
        lcd.print("in rotate");
        Serial.println("I am in Switch Case 3");
        break;
      case 4:       //exit the main menu
        break;
   }
//----------------set date and time into RTC
//----------------designate the number of distributions of pills per day
//----------------set the time for each of the pill distributions
//----------------enable carosselle rotation for initial start spot
//----------------exit out of menus
  
}       //ends else phrase of submenu list


/*  
 //--------------------------------------------  
   while(steps_left>0){
  currentMillis = micros();
  if(currentMillis-last_time>=1000){
  stepper(1); 
  time=time+micros()-last_time;
  last_time=micros();
  steps_left--;
  }
  }
   Serial.println(time);
  Serial.println("Wait...!");
  delay(2000);
  Direction=!Direction;
  steps_left=4095;
  */

}//------------------------------------------------------------end main loop

////// ----------------------------------------shiftIn function
///// just needs the location of the data pin and the clock pin
///// it returns a byte with each bit in the byte corresponding
///// to a pin on the shift register. leftBit 7 = Pin 7 / Bit 0= Pin 0

byte shiftIn(int myDataPin, int myClockPin) {
  int i;
  int temp = 0;
  int pinState;
  byte myDataIn = 0;

  pinMode(myClockPin, OUTPUT);
  pinMode(myDataPin, INPUT);
//we will be holding the clock pin high 8 times (0,..,7) at the end of each time through the for loop

//at the begining of each loop when we set the clock low, it will
//be doing the necessary low to high drop to cause the shift
//register's DataPin to change state based on the value
//of the next bit in its serial information flow.
//The register transmits the information about the pins from pin 7 to pin 0
//so that is why our function counts down
  for (i=7; i>=0; i--)
  {
    digitalWrite(myClockPin, 0);
    delayMicroseconds(0.2);
    temp = digitalRead(myDataPin);
    if (temp) {
      pinState = 1;
      //set the bit to 0 no matter what
      myDataIn = myDataIn | (1 << i);
    }
    else {
      //turn it off -- only necessary for debuging
     //print statement since myDataIn starts as 0
      pinState = 0;
    }

    //Debuging print statements
    //Serial.print(pinState);
    //Serial.print("     ");
    //Serial.println (dataIn, BIN);

    digitalWrite(myClockPin, 1);

  }
  //debuging print statements whitespace
  //Serial.println();
  //Serial.println(myDataIn, BIN);
  return myDataIn;
}
//----------------------
void stepper(int xw){
  for (int x=0;x<xw;x++){
switch(Steps){
   case 0:
     digitalWrite(IN1, LOW); 
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, HIGH);
   break; 
   case 1:
     digitalWrite(IN1, LOW); 
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, HIGH);
   break; 
   case 2:
     digitalWrite(IN1, LOW); 
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, LOW);
   break; 
   case 3:
     digitalWrite(IN1, LOW); 
     digitalWrite(IN2, HIGH);
     digitalWrite(IN3, HIGH);
     digitalWrite(IN4, LOW);
   break; 
   case 4:
     digitalWrite(IN1, LOW); 
     digitalWrite(IN2, HIGH);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break; 
   case 5:
     digitalWrite(IN1, HIGH); 
     digitalWrite(IN2, HIGH);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break; 
     case 6:
     digitalWrite(IN1, HIGH); 
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break; 
   case 7:
     digitalWrite(IN1, HIGH); 
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, HIGH);
   break; 
   default:
     digitalWrite(IN1, LOW); 
     digitalWrite(IN2, LOW);
     digitalWrite(IN3, LOW);
     digitalWrite(IN4, LOW);
   break; 
}
SetDirection();
}
} 
void SetDirection(){
if(Direction==1){ Steps++;}
if(Direction==0){ Steps--; }
if(Steps>7){Steps=0;}
if(Steps<0){Steps=7; }

}

